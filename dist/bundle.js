/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/visitorDomHandler.js":
/*!******************************************!*\
  !*** ./src/scripts/visitorDomHandler.js ***!
  \******************************************/
/***/ (() => {

eval("const fixedValues = {\n  classes: {\n    tableHead: \"#table_head\",\n    tableBody: \"#table_body\",\n    table: \"#visitor_table\",\n    deletePopUp: \".delete_pop_up\",\n    cancelButton: \".cancel_button\",\n    deleteButton: \".delete_button\",\n    newVisitor: \".new_visitor\",\n    updateCancelButton: \".Update-cancel\",\n    updatePopUp: \".update-pop-up\",\n    visitorName: \"#visitor_name\",\n    assistedBy: \"#assisted_by\",\n    visitorAge: \"#visitor_age\",\n    dateOfVisit: \"#date_of_visit\",\n    timeOfVisit: \"#time_of_visit\",\n    comments: \"#comments\",\n    updateError: \".update_errors_pop_up\"\n  },\n};\n\nconst apiEndPoints = {\n  getVisitorList: \"http://localhost:5000/app/visitors\",\n  deleteVisitor: (id) => {\n    return `http://localhost:5000/app/visitors/${id}`;\n  },\n  getVisitorInformation: (id) => {\n    return `http://localhost:5000/app/visitors/${id}`;\n  },\n  updateVisitor: (id) => {\n    return `http://localhost:5000/app/visitors/${id}`;\n  },\n};\n\nclass Visitor {\n  constructor() {\n    this.domElements = {};\n    this.visitorsList = [];\n  }\n\n  initializeVisitor() {\n    this.initializeElements();\n    this.addList();\n    this.newVisitor();\n    this.userButtons();\n  }\n\n  initializeElements() {\n    this.domElements.tableHead = document.querySelector(\n      fixedValues.classes.tableHead\n    );\n    this.domElements.tableBody = document.querySelector(\n      fixedValues.classes.tableBody\n    );\n    this.domElements.deletePopUp = document.querySelector(\n      fixedValues.classes.deletePopUp\n    );\n    this.domElements.deleteButton = document.querySelector(\n      fixedValues.classes.deleteButton\n    );\n    this.domElements.cancelButton = document.querySelector(\n      fixedValues.classes.cancelButton\n    );\n    this.domElements.newVisitor = document.querySelector(\n      fixedValues.classes.newVisitor\n    );\n    this.domElements.updateCancelButton = document.querySelector(\n      fixedValues.classes.updateCancelButton\n    );\n    this.domElements.updatePopUp = document.querySelector(\n      fixedValues.classes.updatePopUp\n    );\n    this.domElements.visitorName = document.querySelector(\n      fixedValues.classes.visitorName\n    );\n    this.domElements.assistedBy = document.querySelector(\n      fixedValues.classes.assistedBy\n    );\n    this.domElements.visitorAge = document.querySelector(\n      fixedValues.classes.visitorAge\n    );\n    this.domElements.dateOfVisit = document.querySelector(\n      fixedValues.classes.dateOfVisit\n    );\n    this.domElements.timeOfVisit = document.querySelector(\n      fixedValues.classes.timeOfVisit\n    );\n    this.domElements.comments = document.querySelector(\n      fixedValues.classes.comments\n    );\n    this.domElements.updateError = document.querySelector(\n      fixedValues.classes.updateError\n    )\n  }\n\n  addList() {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", apiEndPoints.getVisitorList);\n    xhr.responseType = \"json\";\n    xhr.send();\n\n    const self = this;\n\n    xhr.onload = function () {\n      if (xhr.status === 200) {\n        self.visitorsList = xhr.response;\n        self.domElements.tableBody.innerHTML = \"\";\n        self.renderVisitorList(self.visitorsList);\n      } else {\n        console.error(`Error: ${xhr.status}`);\n      }\n    };\n  }\n\n  renderVisitorList(visitorsList) {\n    const namesList = visitorsList.map((visitor) => Object.values(visitor));\n    let idx = 0;\n    const namesId = visitorsList.map((visitor) => Object.keys(visitor));\n    for (let i = 0; i < namesList.length; i++) {\n      const treeRow = document.createElement(\"tr\");\n      const nameTableData = document.createElement(\"td\");\n      const surnameTableData = document.createElement(\"td\");\n      const deleteButton = document.createElement(\"button\");\n      const updateButton = document.createElement(\"button\");\n\n      const [name, surname] = namesList[i][0].split(\" \");\n      nameTableData.textContent = name;\n      surnameTableData.textContent = surname;\n\n      deleteButton.textContent = \"Delete\";\n      deleteButton.style.padding = \"8px\";\n      deleteButton.style.backgroundColor = \"#007BFF\";\n      deleteButton.style.color = \"#fff\";\n      deleteButton.style.borderRadius = \"4px\";\n      deleteButton.style.border = \"none\";\n      deleteButton.style.cursor = \"pointer\";\n      deleteButton.style.marginLeft = \"30px\";\n\n      updateButton.textContent = \"Update\";\n      updateButton.style.padding = \"8px\";\n      updateButton.style.backgroundColor = \"#007BFF\";\n      updateButton.style.color = \"#fff\";\n      updateButton.style.borderRadius = \"4px\";\n      updateButton.style.border = \"none\";\n      updateButton.style.cursor = \"pointer\";\n      updateButton.style.marginLeft = \"30px\";\n\n      deleteButton.id = namesId[idx];\n      updateButton.id = namesId[idx];\n      updateButton.className = \"update-user\";\n      treeRow.id = namesId[idx];\n      idx++;\n\n      treeRow.appendChild(nameTableData);\n      treeRow.appendChild(surnameTableData);\n      treeRow.appendChild(deleteButton);\n      treeRow.appendChild(updateButton);\n      this.domElements.tableBody.appendChild(treeRow);\n    }\n  }\n\n  userButtons() {\n    this.domElements.tableBody.addEventListener(\"click\", (event) => {\n      if (\n        event.target.tagName === \"BUTTON\" &&\n        event.target.textContent === \"Delete\"\n      ) {\n        const visitorId = event.target.id;\n        this.domElements.deletePopUp.style.display = \"flex\";\n        this.domElements.cancelButton.addEventListener(\"click\", () => {\n          this.domElements.deletePopUp.style.display = \"none\";\n          return;\n        });\n        const xhr = new XMLHttpRequest();\n        const self = this;\n        this.domElements.deleteButton.addEventListener(\"click\", async () => {\n          xhr.open(\"DELETE\", apiEndPoints.deleteVisitor(visitorId));\n          xhr.responseType = \"json\";\n          xhr.send();\n\n          xhr.onload =  () => {\n            if (xhr.status === 200) {\n              const rows = self.domElements.tableBody.querySelectorAll(\n                `${fixedValues.classes.tableBody} tr`\n              );\n              const rowsToDelete = Array.from(rows).filter(\n                (row) => row.id === visitorId\n              );\n              rowsToDelete.forEach((row) => row.remove());\n              self.domElements.deletePopUp.style.display = \"none\";\n            } else {\n              console.error(`Error: ${xhr.status}`);\n            }\n          };\n        });\n      } else if (\n        event.target.tagName === \"BUTTON\" &&\n        event.target.textContent === \"Update\"\n      ) {\n      const visitorId = event.target.id;\n      const updatePopUp = this.domElements.updatePopUp;\n      const form = updatePopUp.querySelector(\"form\");\n\n\n      form.reset();\n      const clonedForm = form.cloneNode(true);\n      form.replaceWith(clonedForm);\n\n\n      const newForm = updatePopUp.querySelector(\"form\");\n      const title = updatePopUp.querySelector(\"legend\")\n      title.textContent = \"Update Information\"\n\n      updatePopUp.style.display = \"flex\";\n      \n\n      newForm.addEventListener(\"submit\", (e) => {\n        e.preventDefault();\n\n        const formData = new FormData(newForm);\n        const data = {};\n        formData.forEach((value, key) => {\n          data[key] = value;\n        });\n        \n        const self = this\n      \n        const xhrUpdate = new XMLHttpRequest();\n        xhrUpdate.open(\"PUT\", apiEndPoints.updateVisitor(visitorId));\n        xhrUpdate.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhrUpdate.onload = () => {\n          if (xhrUpdate.status === 200) {\n            updatePopUp.style.display = \"none\"; \n            self.addList(); \n          } else if(xhrUpdate.status === 400){\n            this.domElements.updateError.style.display = \"flex\"\n            console.error(xhrUpdate.responseText);\n          }\n        };\n        xhrUpdate.send(JSON.stringify(data));\n      });\n      \n\n        this.domElements.updateCancelButton.addEventListener(\"click\", () => {\n          this.domElements.updatePopUp.style.display = \"none\";\n          return;\n        });\n      }\n    });\n  }\n\n  getCurrentUserInformation(id) {\n    const self = this;\n    const xhrGetUserInformation = new XMLHttpRequest();\n    xhrGetUserInformation.open(\"GET\", apiEndPoints.getVisitorInformation(id));\n    xhrGetUserInformation.send();\n\n    xhrGetUserInformation.onload = () => {\n      if (xhrGetUserInformation.status === 200) {\n        const visitorData = JSON.parse(xhrGetUserInformation.response);\n        self.domElements.visitorName.value = visitorData.visitor_name;\n        self.domElements.assistedBy.value = visitorData.assisted_by;\n        self.domElements.visitorAge.value = visitorData.visitor_age;\n        self.domElements.dateOfVisit.value = visitorData.date_of_visit.slice(\n          0,\n          10\n        );\n        self.domElements.timeOfVisit.value = visitorData.time_of_visit.slice(\n          0,\n          5\n        );\n        self.domElements.comments.value = visitorData.comments;\n      } else {\n        console.error(`Error: ${xhrGetUserInformation.status}`);\n      }\n    };\n  }\n\n  newVisitor() {\n    this.domElements.newVisitor.addEventListener(\"click\", () => {\n      const updatePopUp = this.domElements.updatePopUp;\n      const form = updatePopUp.querySelector(\"form\");\n\n\n      form.reset();\n      const clonedForm = form.cloneNode(true);\n      form.replaceWith(clonedForm);\n\n      const title = updatePopUp.querySelector(\"legend\")\n      title.textContent = \"Visitor Information\"\n      \n      updatePopUp.style.display = \"flex\";\n\n    });\n    this.domElements.updateCancelButton.addEventListener(\"click\", () => {\n      this.domElements.updatePopUp.style.display = \"none\";\n    });\n  }\n  \n}\n\nif (typeof document !== \"undefined\") {\n  const visitorOne = new Visitor();\n  visitorOne.initializeVisitor();\n}\n\n\n\n//# sourceURL=webpack://siduduzile-mdima-282-node-sql-assignment-javascript/./src/scripts/visitorDomHandler.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/scripts/visitorDomHandler.js"]();
/******/ 	
/******/ })()
;